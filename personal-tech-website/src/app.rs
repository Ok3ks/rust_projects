use leptos::*;
use leptos_meta::*;
use chrono::{Utc};
use leptos_router::*;
use std::fs;
use std::path::Path;
use serde::{Deserialize, Serialize};
use std::fmt;

stylance::import_crate_style!(my_style, "style/main.scss");

#[derive(Serialize, Deserialize, Debug, Copy, Clone)]
struct Article<'a> {
    id: i16,
    title: &'a str,
    text_content: &'a str,
    is_draft: bool,
    is_published: bool
    //Add date
}

impl Article<'_> {
    fn validate(&self) {
        assert_eq!(self.is_draft, !self.is_published)
    }

    fn to_json(&self) -> String {
        self.validate();
        serde_json::to_string(self).unwrap()
    }

    pub fn save(&self) {
        let binding = format!("{0}_{1}.txt", self.id, self.title).to_string();
        let path = Path::new(&binding);
        // P: AsRef<Path>
        let file_path = path.to_path_buf();

        if let Some(parent) = file_path.parent() {
            fs::create_dir_all(parent).unwrap();
        }
        fs::write(path, self.to_json()).unwrap();
    }

    pub fn publish(&mut self) {
        self.is_published = true;
        self.save();
    }
}

#[component]
pub fn App() -> impl IntoView {
    // Provides context that manages stylesheets, titles, meta tags, etc.
    provide_meta_context();

    view! {
        // injects a stylesheet into the document <head>
        // id=leptos means cargo-leptos will hot-reload this stylesheet
        <Stylesheet id="leptos" href="/pkg/leptos_start.css"/>

        // sets the document title
        <Title text="Hi Emmanuel"/>

        // content for this welcome page
        
        <Router>
            <main>
                <Routes>
                    //Main Routes
                    <Route path="/write" view=Write/>
                    <Route path="/editor/:id" view=Editor/>

                    //Additional Templates
                    <Route path="" view=HomePage/>
                    <Route path="/template" view=Template/>
                    <Route path="/dynamic" view=DynamicTemplate/>
                    <Route path="/*any" view=NotFound/>
                 
                </Routes>
            </main>
        </Router>
    }
}

#[component]
fn JokesEmbed() -> impl IntoView {

    let Jokes: Vec<String> = vec!["Why do programmers prefer dark mode? Because light attracts bugs!",
    "I told my computer I needed a break, and now it won't stop sending me Kit-Kat ads.",
    "Why don't programmers like nature? It has too many bugs and no debugging tool.",
    "My software is like a teenage boy - it crashes at random times and never tells me why.",
    "What's a web developer's favorite tea? URL Grey.",
    "Why was the JavaScript developer sad? Because he didn't know how to 'null' his feelings.",
    "How many programmers does it take to change a light bulb? None, that's a hardware problem.",
    "The first computer bug was an actual bug! In 1947, Grace Hopper found a moth trapped in a Harvard Mark II computer. When she removed it, she noted that they were 'debugging' the system.",
    "The entire internet weighs about the same as a strawberry. All those electrons that make up the internet in transit at any moment weigh around 50 grams.",
    "Nintendo was founded in 1889, more than 130 years ago. They originally sold handmade playing cards!",
    "The first computer mouse was made of wood. Douglas Engelbart created the prototype in 1964 at Stanford Research Institute.",
    "The world's first website, created by Tim Berners-Lee in 1991, is still online at info.cern.ch.",
    "About 90% of the world's currency exists only on computers, not as physical cash.",
    "If you printed the entire Google index, it would stack 70 miles high.",
    "On an average day, people take more photos than were taken during the entire 19th century.",
    "The first YouTube video was uploaded on April 23, 2005, titled 'Me at the zoo' and was only 18 seconds long."].into_iter().map(|s| s.to_owned()).collect();


    // let mut random_index:Vec<i32> = vec![2,3,5,6,1,3,4,8,5]; //Rand does not work well with wasm
    let current_time = Utc::now().time().to_string();
    let last_digit: usize = current_time
        .chars()
        .last()
        .and_then(|c| c.to_digit(10))
        .unwrap_or(0) as usize;
        

    view! {
        <section id="jokes" style="padding: 3rem 0;">
        <div>
        <h5>{&Jokes[last_digit]}</h5>
        <p style="font-style: italic; align-items: self-end"> "...generated by claude" </p>

        <h5>{&Jokes[last_digit % 3 ]}</h5>
        <p style="font-style: italic; align-items: self-end"> "...generated by claude" </p>
        
        </div>
    </section>
    }
}

/// Renders the home page of your application.
#[component]
fn HomePage() -> impl IntoView {

    view! {
        <nav style="background-color: var(--cream); display: flex; justify-content: flex-end"> 
        <A href = "https://github.com/ok3ks"><div class="icons8-mail"></div></A>
        <A href = "mailto:okedeleayodeji60@gmail.com"><div class="icons8-github"></div></A>
        <A href="https://www.linkedin.com/in/emmanuel-okedele-7654a01b0/"><div class="icons8-linkedin"></div> </A>
        </nav>
        <header class="bg-navy">
        <div class="container" style="padding: 4rem 1rem;">
            <h1 style="color: var(--cream); border-color: var(--green);">"Emmanuel Okedele"</h1>
            <p style="color: var(--cream); font-size: 1.2rem; max-width: 600px; margin-bottom: 2rem;">
                "I collaboratively build software systems by writing scalable and maintainable code"
            </p>
            <p class="function"> "Functions: Data Science, Machine Learning, Backend Engineering, Infrastructure deployment, Web Application Development" </p>
            
            <A href="#articles" class="btn">"Thoughts"</A  > //use Navigate to move to another page on click
            <A href="#about" class="btn btn-secondary">"Reach Out"</A>
        </div>
    </header>
    // Use random module to always generate one from the list, or link to a simple OPENAI call
    <JokesEmbed/>
    <section>
    <div class="container">
        <h2 id="articles">"Articles"</h2>

        <p><A href="https://medium.com/@emmanuelokedele/a-b-tests-versus-canary-releases-5bdca4596a4e">"A/B Tests versus Canary Releases"</A  ></p>
        <p><A href="https://medium.com/@emmanuelokedele/continuous-annotation-to-improve-data-quality-e2f8d91e88f3">"Continuous Annotation"</A  ></p>
        <p><A href="https://medium.com/@emmanuelokedele/role-of-data-in-the-lifecycle-of-a-machine-learning-model-209d7abca6cc">"Role of Data in Lifecycle of a machine learning Model"</A  ></p>
        <p><A href="https://medium.com/@emmanuelokedele/assumptions-guide-hypotheses-guide-8a09528af0a6">"Assumptions blind, Hypothesis Guide"</A  ></p>
        
    </div>
    </section>

    <div style="background-color: var(--cream); display: flex; justify-content: center;">
        <A href = "https://github.com/ok3ks"><div class="icons8-mail"></div></A>
        <A href = "mailto:okedeleayodeji60@gmail.com"><div class="icons8-github"></div></A>
        <A href="https://www.linkedin.com/in/emmanuel-okedele-7654a01b0/"><div class="icons8-linkedin"></div> </A>
    </div>

    //Use form as contact 

    }
}


#[component]
fn Editor() -> impl IntoView {

    let params:Memo<ParamsMap> = use_params_map();
    let id = move || params.read().get("id").unwrap_or_default();
    let current_article = Article{
        id: id 
    };

    let input_element: NodeRef<Input> = NodeRef::new();
    //if in draft obtain content

    let (title, set_title) = signal("Title".to_string());
    let on_submit = move |ev: SubmitEvent| {
        ev.prevent_default();
        let value = input_element.get().expect("<input> to exist").value();
        set_title.set(value);
    };

    view! {
        <header class="writing-form" style="padding: 2rem 0;"></header>
        <div class="action-bar">
            <button type="submit" class="btn-draft">Save Draft</button>
            <button type="submit" class="btn-primary">Publish</button>
        </div>
        
        <div class="writing-container">

        //escaping form input
        <form class="writing-form" action="#" method="post" on:submit=on_submit>
            <textarea 
                class="title-input" 
                placeholder="Title" 
                name="title" 
                id="title"
                rows="1"
                node_ref=input_element
                required>
            </textarea>
            

            <div class="editor-toolbar">
                <button type="button" class="toolbar-btn" title="Bold">
                    <strong>B</strong>
                </button>
                <button type="button" class="toolbar-btn" title="Italic">
                    <em>I</em>
                </button>
                <button type="button" class="toolbar-btn" title="Underline">
                    <u>U</u>
                </button>
                <button type="button" class="toolbar-btn" title="Add Link">
                    "üîó"
                </button>
                <button type="button" class="toolbar-btn" title="Quote">
                    "‚ùù"
                </button>
                <button type="button" class="toolbar-btn" title="Bullet List">
                    "‚Ä¢ List"
                </button>
                <button type="button" class="toolbar-btn" title="Numbered List">
                    "1. List"
                </button>
                <button type="button" class="toolbar-btn" title="Heading">
                    "H1"
                </button>
            </div>
            <textarea 
                class="content-editor" 
                placeholder="Start writing your story..."
                name="content" 
                id="content"
                required
            ></textarea>
        </form>
        </div>

        <div class="editor-stats">
            <div class="word-count">0 words</div>
            <div class="read-time">1 min read</div>
        </div>

        <div class="writing-tips">
            "üí° Tip: Write your first draft without editing"
        </div>

}

    let query = use_query_map();
    let title = query.read().get("title").unwrap_or_default();
    let content = query.read().get("content").unwrap_or_default();

}

#[component]
fn Drafts() -> impl IntoView {
    //Ingest drafts, used their title as the started of each line, with an edit button right beside.
    //Sort by Tags? Timestamp
    view! {
        <header class="writing-form" style="padding: 2rem 0;"></header>
        <ul class="drafts">
            <li> 
                <div class="flex-row">
                    <p>"This is a new draft"</p>  
                    <button type="button" class="btn-draft"> "Edit" </button>
                </div>
            </li>
        </ul>
}}

#[component]
fn Write() -> impl IntoView {
    let navigate = leptos_router::use_navigate();
    //obtains list of drafts, increment id and pass to editor
    let id = 1;
    
    view! {
        <header class="writing-form" style="padding: 2rem 0;"></header>
        <div>
            <Drafts/>
            <button on:click= move |_|{ navigate(&format!("/editor/{id}"), Default::default())} > "New" </button> //redirect to Editor with id
        </div>
}}
/// 404 - Not Found
#[component]
fn NotFound() -> impl IntoView {
    // set an HTTP status code 404
    // this is feature gated because it can only be done during
    // initial server-side rendering
    // if you navigate to the 404 page subsequently, the status
    // code will not be set because there is not a new HTTP request
    // to the server
    #[cfg(feature = "ssr")]
    {
        // if it were async, we'd use a server function
        let resp = expect_context::<leptos_actix::ResponseOptions>();
        resp.set_status(actix_web::http::StatusCode::NOT_FOUND);
    }

    view! {
        <h1>"Not Found"</h1>
    }
}
